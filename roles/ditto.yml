- name: Install required packages
  become: true
  apt:
    name:
      - libdbus-1-dev
      - libglib2.0-dev
      - libudev-dev
      - libical-dev
      - libreadline-dev
      - docutils-common
      - sense-hat
    state: present
  tags: ditto_install

- name: Download and install BlueZ
  block:
    - name: Download BlueZ
      get_url:
        url: http://www.kernel.org/pub/linux/bluetooth/bluez-5.66.tar.xz
        dest: '{{ ansible_env.HOME }}/bluez-5.66.tar.xz'

    - name: Extract BlueZ
      unarchive:
        src: '{{ ansible_env.HOME }}/bluez-5.66.tar.xz'
        dest: '{{ ansible_env.HOME }}'
        creates: '{{ ansible_env.HOME }}/bluez-5.66'
        remote_src: yes

    - name: Install BlueZ
      become: true
      command:
        cmd: "{{ item }}"
        chdir: '{{ ansible_env.HOME }}/bluez-5.66'
        creates: '/usr/local/bin/bluetoothctl'
      loop:
        - ./configure
        - make
        - make install
    - name: Modify bluetooth service file ConfigurationDirectoryMode
      become: true
      lineinfile:
        path: /usr/lib/systemd/system/bluetooth.service
        regexp: '^ConfigurationDirectoryMode='
        line: 'ConfigurationDirectoryMode=0755'
    - name: Fix Controller line in /etc/bluetooth/main.conf
      become: true
      ansible.builtin.lineinfile:
        path: /etc/bluetooth/main.conf
        regexp: '^[Controller]'
        line: '#[Controller]'
    - name: Modify bluetooth service file
      become: true
      lineinfile:
        path: /usr/lib/systemd/system/bluetooth.service
        regexp: '^ExecStart='
        line: 'ExecStart=/usr/local/libexec/bluetooth/bluetoothd --noplugin=sap -P battery --experimental'
      register: bluez
  tags: ditto_bluez

- name: Reload and restart bluetooth service
  become: true
  systemd:
    daemon_reload: yes
    name: bluetooth
    state: restarted
  when: bluez.changed
  tags: ditto_bluez

- name: Set bluetooth configuration
  become: true
  command:
    cmd: "{{ item }}"
  loop:
    - hciconfig hci0 down
    - btmgmt bredr off
    - btmgmt le on
    - hciconfig hci0 up
  when: bluez.changed
  tags: ditto_bluez

- name: Get path to hcitool
  command: which hcitool
  register: hcitool_path
  changed_when: false
  when: bluez.changed
  tags: ditto_bluez

- name: Set BlueZ support for multiple advertisements
  become: true
  shell: "setcap 'cap_net_raw,cap_net_admin+eip' {{ hcitool_path.stdout }}"
  when: bluez.changed
  tags: ditto_bluez

- name: Clone Ditto btle_wifi_proto repo
  git:
    repo: 'https://github.com/kitplummer/btle_wifi_proto.git'
    dest: "{{ ansible_env.HOME }}/ditto_demo"
    force: true
  register: ditto_demo_repo
  tags: ditto_install

- name: Run tsc compile
  shell: |
    export NVM_DIR="{{ ansible_user_dir }}/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    cd {{ ansible_user_dir }}/ditto_demo
    npm install 
    tsc wap.ts
    tsc sensor.ts
  when: ditto_demo_repo.changed
  args:
    creates: sensor.js
  tags: ditto_install

- name: Place config.js file
  ansible.builtin.template:
    src: templates/ditto_demo_config.j2
    dest: "{{ ansible_user_dir }}/ditto_demo/config.json"
    mode: '0600'
  tags: ditto_install 

- name: Start Ditto sensor service if not running
  pm2:
    name: ditto_demo
    chdir: "{{ ansible_user_dir }}/ditto_demo"
    script: "node sensor.js"
    state: started
  tags: ditto_install 

- name: Setup Ditto sensor systemd service
  become: yes
  shell: |
    pm2 startup systemd -u pi --hp /home/pi
    pm2 save
  args:
    creates: /etc/systemd/system/multi-user.target.wants/pm2-pi.service
  tags: ditto_install 
